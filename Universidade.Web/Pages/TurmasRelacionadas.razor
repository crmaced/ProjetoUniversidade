@page "/relacionarTurmas"
@using Serilog
@using Universidade.Web.Domain.Enties
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<PageTitle>Relacionar Turmas</PageTitle>

<h1>Relacionar Turmas</h1>

@if (carregando)
{
	<p><em>Carregando...</em></p>
}
else if (!carregando && relacionamentos == null)
{
	<p><em>Não há dados.</em></p>
}
else
{
	<div style="display:flex;justify-content: flex-end;">
		<button class="btn btn-create" @onclick="() => NavigateToPage()">Relacionar</button>
	</div>

	<ul style="list-style:none;">
		@foreach (var turma in relacionamentos)
		{

			<li style="margin: 20px;">
				<div style="background-color:#1D354F;">
					<label style="color:#fff;"><b>@turma.id - @turma.turma</b></label>
				</div>

				@if (!turma.alunos.Any())
				{
					<b>Não há alunos cadastrados para essa turma.</b>
				}
				else
				{
					<div class="description">
						<table class="table-alunos">
							<thead>
								<tr class="table-alunos-title">
									<th style="width: 5%;">Id</th>
									<th style="width: 40%;">Nome</th>
									<th style="width: 15%;">Usuário</th>
									<th style="width: 40%;">Ação</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var aluno in turma.alunos)
								{
									<tr>
										<td>@aluno.id</td>
										<td>@aluno.nome</td>
										<td>@aluno.usuario</td>
										<td>
											<button class="btn btn-delete" @onclick="() => TaskDelete((int)aluno.id, turma.id)">Excluir</button>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</li>
		}
	</ul>
}


@code {

	bool carregando = true;
	private List<Relacionamento> relacionamentos;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await Http.GetFromJsonAsync<ApiResponse<List<Relacionamento>>>("RelacionarTurma/ListarRelacionamentos");

			if (response != null && response.Success)
			{
				relacionamentos = response.Data;
			}

			carregando = false;
		}
		catch (Exception ex)
		{
			Log.Error($"Erro: {ex.Message}");
			await JsRuntime.InvokeVoidAsync("alert", "Não foi possível carregar a página. Por favor, tente novamente.");
			carregando = false;
		}
	}

	private async Task TaskDelete(int idAluno, int idTurma)
	{
		try
		{
			var response = await Http.DeleteFromJsonAsync<ApiResponse<List<Aluno>>>($"RelacionarTurma/DeletarRelacionamento?alunoId={idAluno}&turmaId={idTurma}");

			if (response != null && response.Success)
			{
				await JsRuntime.InvokeVoidAsync("alert", "Relacionamento excluído com sucesso.");
				Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
			}
			else
			{
				await JsRuntime.InvokeVoidAsync("alert", "Erro ao excluir Relacionamento.");
			}
		}
		catch (Exception ex)
		{
			Log.Error($"Erro: {ex.Message}");
			await JsRuntime.InvokeVoidAsync("alert", "Erro na execução.");
		}
	}
	private void NavigateToPage()
	{
		Navigation.NavigateTo("/relacionarAlunoTurma", forceLoad: true);
	}
}