@page "/editarAluno/{Id:int}"
@using Serilog
@using Universidade.Web.Domain.Enties
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<PageTitle>Editar Aluno</PageTitle>

<h3>Editar Aluno</h3>

@if (alunoInput == null)
{
	<p><em>Carregando...</em></p>
}
else
{

	<EditForm Model="@alunoInput" OnValidSubmit="@HandleValidSubmit">
		<DataAnnotationsValidator />
		<div class="single-column">
			<label for="nome"><strong>Aluno</strong></label>
			<InputText class="input" id="nome" name="nome" @bind-Value="alunoInput.Name" />
		</div>

		<div class="double-column">
			<div class="column-one">
				<label for="usuario"><strong>Usuário</strong></label>
				<InputText class="input" id="usuario" name="usuario" @bind-Value="alunoInput.Username" />
			</div>
			<div class="column-two">
				<label for="senha"><strong>Senha</strong></label>
				<InputText class="input" type="password" id="senha" name="senha" @bind-Value="alunoInput.PassWord" />
			</div>
		</div>
		<div class="butons">
			<button type="submit" name="editar" class="btn">Editar Aluno</button>
		</div>
	</EditForm>
}


@code {
	[Parameter] public int Id { get; set; }
	private AlunoDTO alunoInput = new AlunoDTO();
	private Aluno alunoOriginal = new Aluno();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await Http.GetFromJsonAsync<ApiResponse<Aluno>>($"Aluno/BuscarAluno?id={Id}");

			if (response != null && response.Success)
			{
				alunoOriginal = response.Data;
				alunoInput.Name = alunoOriginal.nome;
				alunoInput.Username = alunoOriginal.usuario;
			}
			else
			{
				await JsRuntime.InvokeVoidAsync("alert", "Não foi possível carregar a página. Por favor, tente novamente.");
				Navigation.NavigateTo("/alunos", forceLoad: true);
			}
		}
		catch (Exception ex)
		{
			Log.Error($"Erro: {ex.Message}");
			await JsRuntime.InvokeVoidAsync("alert", "Não foi possível carregar a página. Por favor, tente novamente.");
			Navigation.NavigateTo("/alunos", forceLoad: true);
		}
	}

	private async Task HandleValidSubmit()
	{
		try
		{
			var validate = ValidaDados();
			if (validate is not null)
			{
				await JsRuntime.InvokeVoidAsync("alert", validate);
				return;
			}

			var response = await Http.PatchAsJsonAsync($"Aluno/AtualizarAluno?id={Id}", alunoInput);

			if (response.IsSuccessStatusCode)
			{
				await JsRuntime.InvokeVoidAsync("alert", "Aluno alterado com sucesso.");
				Navigation.NavigateTo("/alunos", forceLoad: true);
			}
			else
			{
				var responseContent = await response.Content.ReadFromJsonAsync<ApiResponse<Aluno>>();
				await JsRuntime.InvokeVoidAsync("alert", responseContent.Message);
			}
		}
		catch (Exception ex)
		{
			Log.Error($"Erro: {ex.Message}");
			await JsRuntime.InvokeVoidAsync("alert", "Erro na execução.");
		}
	}

	public string? ValidaDados()
	{
		if (alunoInput.PassWord is not null)
		{
			if (alunoInput.PassWord.Length <= 7)
				return "Senha deve ter pelo menos 8 caracteres e incluir letras maiúsculas, minúsculas, números e caracteres especiais.";

			if (alunoInput.PassWord.Length > 60)
				return "Tamanho do campo senha foi excedido.";
		}

		if (alunoInput.Username is null)
			return "Por favor, informe o usuário.";

		if (alunoInput.Username.Length > 45)
			return "Tamanho do campo usuário foi excedido.";

		if (alunoInput.Username.Length <= 7)
			return "Usuário deve ter pelo menos 8 caracteres.";

		if (alunoInput.Name is null)
			return "Por favor, informe o nome do aluno.";

		if (alunoInput.Username.Length > 255)
			return "Tamanho do campo usuário foi excedido.";

		return null;
	}

}
